https://gist.github.com/Geoyi/d9fab4f609e9f75941946be45000632b
setup: https://www.pyimagesearch.com/2019/01/30/ubuntu-18-04-install-tensorflow-and-keras-for-deep-learning/

:: default python as python 3.6
A simple safe way would be to use an alias. Place this into ~/.bashrc or ~/.bash_aliases file:
alias python=python3
After adding the above in the file, run source ~/.bashrc or source ~/.bash_aliases.
or by: $ alias python=python3   to revert: unalias python
$ python --version
Python 3.4.3

1.Now create a virtual environment:
> virtualenv venv-name  : (in place of venv-name use tensor) 
2. You can also use a Python interpreter of your choice
> virtualenv -p /usr/bin/python2.7 venv
3. Active your virtual environment:
> source venv-name/bin/activate :  (in place of venv-name use tensor)
4. pip freeze > requirements.txt
4. pip install -r requirements.txt
4. deactivate

Steps to execute Tensorflow for object detection:
for customised data set:
1.object_detection/custom_dataset
inside: custom_dataset: 
a) data (for csv and tfrecord file) 
b) images (tain and test images with labelled xml files)
c) labelimage (for labeling of input train and test images)
xml_to_csv.py
generate_tfrecord.py

2. Then put test.record and train.record to object_detection/data. Also create a object_label_map.pbtxt file.

3. create a object_detection/training folder to hold customised model.config file.

4. Download a working reference model for it's check point to be used during model training.

before this step need to export pythonpath:export PYTHONPATH=$PYTHONPATH:`pwd`:`pwd`/slim
export PYTHONPATH=$PYTHONPATH:`pwd`:`pwd`/object_detection
5. python train.py --logtostderr --train_dir=training/ --pipeline_config_path=training/faster_rcnn_inception_v2_pets.config

6. python export_inference_graph.py --input_type image_tensor --pipeline_config_path training/faster_rcnn_inception_v2_pets.config --trained_checkpoint_prefix training/model.ckpt-13302 --output_directory trained-inference-graphs/output_inference_graph_v1.pb